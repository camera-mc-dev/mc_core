#
# Path to data:
# full path is <dataRoot>/<trialRoot>
# dataRoot can come from common config if not included here.
#
dataRoot = "/path/to/data/"
testRoot = "trial/under/dataroot/"


#
# location of video/image data. Can be directories of images, or video files.
# don't recommend mixing but I guess you can.
#
imgDirs = (
            "00.mp4",
            "01.mp4"
          );

#
# configuration of the calibration board.
#
grid:
{
	rows = 9;
	cols = 10;
	rspacing = 78.5;
	cspacing = 78.5;
	isLightOnDark = false;
	useHypothesis = false;
	hasAlignmentDots = true;
};

#
# Settings for MSER based grid detector, see calib.md for details
#
gridFinder:
{
	visualise = false;
	MSER_delta = 5;
	MSER_minArea = 9;
	MSER_maxArea = 2500;
	MSER_maxVariation = 0.2;
	blobDetector = "MSER";
	potentialLinesNumNearest = 8;
	parallelLineAngleThresh = 5.0;
	parallelLineLengthRatioThresh = 0.85;
	gridLinesParallelThresh = 25.0;
	gridLinesPerpendicularThresh = 60.0;
	gapThresh = 0.8;
	alignDotSizeDiffThresh = 25.0;
	alignDotDistanceThresh = 10.0;
	maxGridlineError = 32.0;
};


#
# Controls whether we need to perform detection of the grids in the images.
# Grid detections are stored in a "grids" file in the image source directories.
#
useExistingGrids = true;


# the initial calibration is done for the intrinsics
# using a number of the calibration boards.
# set this to 0 to use all boards (default),
# or speed things up significantly by only calibrating
# with some maximum number.
maxGridsForInitial = 90;


#
# Initial calibration is done per-camera to get camera intrinsics.
# Technically, distortion is an intrinsic and it can be calculated quite
# well at this early stage of processing - if you have enough grids
# turned on for initial calibration.
# In practice however, the calibration works better overall if 
# distortion parameters come out of the bundle adjustment stages.
# As such, this should normally be set to true unless you are
# having problems.
#
noDistortionOnInitial = true;


#
# If we have them, then we can use existing intrinsics.
# Probably keep this as false except in exceptional circumstances
#
useExistingIntrinsics = false;


#
# Specify the number of distortion and intrinsic parameters to solve for.
#
# The intrinsics can be:
# 1: just focal length
# 3: focal length and principle point
# 4: as 3 plus aspect ratio
# 5: as 4 plus skew
#
# 3 is normall a good option.
#
#
# the distortion parameters are r^2, r^4, tx, ty, r^6
#
# 2 (r^2, r^4) is generally good enough.
#
# If you have problems, then solving for fewer parameters is generally a
# good place to start.
#
numDistortionToSolve = 2;
numIntrinsicsToSolve = 3;

#
# Calibration works by picking the camera that sees the most grids,
# reconstructing those grids in 3D, and then using those reconstructions
# to estimate the positions of some number of new cameras.
# 
# Once those new cameras are known, they will allow for more grids to
# be estimated, and thus, for more cameras to be added etc.
#
# This parameter forces the solver to only ever add one new camera
# after each stage of estimating new grids.
# 
# It leads to more stages of processing, but is generally more reliable.
#
# But not _always_ more reliable.
#
forceOneCam = true;

#
# Similarly, if we are allowing multiple cameras to be added, then
# this specifies the minimum number of grid observations shared between
# cameras for a new camera to be added. Note that all cameras will eventually
# be added - it will then just be one at a time if there's not enough shares.
#
minSharedGrids = 80;

#
# Bundle adjustment is the heavy processing part of the calibration
# process, and is what ultimately results in a high quality calibration.
# It can however be useful to try running without it sometimes for debugging
# or other purposes.
#
useSBA = true;
SBAVerbosity = 3;


# how much visualisation?:
# 0 : none (default)
# 1 : show visualisation before bundle and final
# 2 : show visualisation after bundle and final
# 3 : show visualisation before and after bundle and final
# >0 : show visualisation of final result
visualise = 0;

#
# Sometimes it can be useful/necessary to augment the grid observations with
# a set of manual point matches between the camera views.
#/home/ln424/Downloads/
# This specifies the file that contains the matches.
#
# Leave it commented out if you are not using manual point matches.
#
matchesFile = "matches";

#
# These, meanwhile, are options that configure the pointMatcher tool for
# finding those manual matches. It controls the window size of the tool,
# and which frame number is used for each camera view.
#
frameInds   = (0,0);
winX = 1280;
winY = 1024;

#
# the origin-target might not be flush with
# the desired ground plane, so this
# specifies the depth of it. We can then
# apply a -depth shift on z once
# the initial alignment is complete
#
targetDepth = 0.0;

#
# instead of the interactive and sub-optimal stage of the manual alignment tool,
# we can use some of the matches from the matches file.
# points in order: point on x-axis, origin point, point on y-axis
#
axisPoints = (0,1,2);

#
# Sometimes it is easier to click on a negative x or y point than a positive one
# when setting the scene orientation.
#
alignXisNegative = false;
alignYisNegative = false;

#
# Sets the frame that is loaded by calibCheck
#
originFrame = 100;
